<templateSet group="NatePersonalLiveTemplates">
  <template name="mr" value="@org.junit.Rule public org.mockito.junit.MockitoRule rule = org.mockito.junit.MockitoJUnit.rule();" description="Mockito Rule" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="l" value="private static final Logger logger = LogManager.getLogger($CLASS_NAME$.class);" description="Java Logger (Log4j2)" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS_NAME" expression="className()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="backboneFormWithValidation" value="const $ = require('jquery')&#10;const _ = require('lodash')&#10;const Backbone = require('backbone')&#10;&#10;const formHelper = require('scoreboard/form-helper')&#10;const FormView = require('scoreboard/components/form-view')&#10;const i18n = require('scoreboard/i18n')&#10;const MarkedField = require('scoreboard/components/marked-field')&#10;const requiredValidator = require('scoreboard/components/validators/required-validator')&#10;&#10;const template = require('./$HBSTemplate$.hbs')&#10;&#10;const $ModuleName$ = Backbone.View.extend({&#10;&#10;&#9;tagName: 'form',&#10;&#10;&#9;className: 'panel',&#10;&#10;&#9;/**&#10;&#9; * @param options&#10;&#9; */&#10;&#9;initialize: function (options) {&#10;&#9;&#9;this.options = options || {}&#10;&#9;&#9;this.markedFields = []&#10;&#9;&#9;this.formView = new FormView({&#10;&#9;&#9;&#9;el: this.el,&#10;&#9;&#9;&#9;submit: this.submit.bind(this)&#10;&#9;&#9;})&#10;&#9;},&#10;&#10;&#9;render: function () {&#10;&#9;&#9;this.$el.empty().append(template({}))&#10;&#10;&#9;&#9;formHelper.writeToDom(this.model, this.el)&#10;&#10;&#9;&#9;// TODO: Add or remove marked fields&#10;&#9;&#9;this.markedFields.push(new MarkedField({&#10;&#9;&#9;&#9;el: this.$('[name=message]'),&#10;&#9;&#9;&#9;validator: requiredValidator&#10;&#9;&#9;}).render())&#10;&#10;&#9;&#9;this.formView.start()&#10;&#10;&#9;&#9;return this&#10;&#9;},&#10;&#10;&#9;remove: function () {&#10;&#9;&#9;Backbone.View.prototype.remove.apply(this, arguments)&#10;&#9;&#9;_.invokeMap(this._markedFields, 'remove')&#10;&#9;},&#10;&#10;&#9;submit: function () {&#10;&#9;&#9;const formData = formHelper.readFromDom(this.el)&#10;&#9;&#9;this.trigger('done')&#10;&#9;}&#10;})&#10;&#10;module.exports = $ModuleName$" description="Backbone form including: formHelper, markedFields" toReformat="false" toShortenFQNames="true">
    <variable name="HBSTemplate" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="ModuleName" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="hc" value="{{!-- $END$ --}}" description="Handlebars Comment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="Handlebars" value="true" />
    </context>
  </template>
  <template name="after" value="after(() =&gt; {&#10;  $END$&#10;})" description="Inserts after() block" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ae" value="afterEach(() =&gt; {&#10;  $END$&#10;})" description="Inserts afterEach() block" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="before" value="before(() =&gt; {&#10;  $END$&#10;})" description="Inserts before() block" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="be" value="beforeEach(() =&gt; {&#10;  $END$&#10;})" description="Inserts beforeEach() block" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="desc" value="describe('$NAME$', () =&gt; {&#10;  $END$&#10;})" description="Inserts describe() block" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="jsMethodName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="it" value="it('must $END$', () =&gt; {&#10;  &#10;})" description="Inserts it() block" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>